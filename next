#! /usr/bin/env bash
if [ "$1" != "s" ] && [ "$1" != "+" ]; then
  export LINE=$((LINE + 1))
  LINE_TEXT=$(sed -n "$LINE"p "$SCRIPT_PATH")
elif [ "$1" = "+" ]; then
  LINE_TEXT=$(pbpaste)
  shift
else
  [[ -n "$2" ]] && export SCENE=$(($2 - 1)) # Forcing SCENE number (to play from line)
  [[ -n "$3" ]] && export LINE=$(($3 - 1))  # Forcing LINE shift (to rewind to the scene)
fi

function typing() {
  cat | pv -qL $((15 + (-2 + RANDOM % 5)))
}

function trim() {
  cat | sed 's/^ *//;s/ *$//'
}

function read_array() {
  if [ -n "$ZSH_VERSION" ]; then
    read -rA "$@"
  elif [ -n "$BASH_VERSION" ]; then
    read -ra "$@"
  else
    echo "ERROR: UNSUPPORTED SHELL!"
  fi
}

function join_by { local d=$1; shift; local f=$1; shift; printf %s "$f" "${@/#/$d}"; }

function print_key {
    local line1="   "; local line2="   "; local line3="   "
    declare -a keys

    IFS='+' read_array keys <<<"$@"

    local keys_count="${#keys[@]}"
    local i=0

    for key in "${keys[@]}"
    do
      i=$((i+1))

      line1+="╒═";
      for ((j=0; j<${#key}; j++)) do line1+="═"; done; line1+="═╗   ";

      line2+="│ ${key} ║"
      [[ $i == "$keys_count" ]] && line2+="   " || line2+=" ✚ "

      line3+="╘═";
      for ((j=0; j<${#key}; j++)); do line3+="═"; done; line3+="═╝   ";
    done;

    echo "$line1"; echo "$line2"; echo "$line3"
}

function eval_script {
  local i=0

  while IFS= read -r line; do
      if [ $((i%2)) -eq 0 ]
      then
        echo "${line}" | pbcopy
      else
        # shellcheck disable=SC2046
        # shellcheck disable=SC2116
        . ./next + $(echo "$line")
      fi
      i=$((i+1))
  done <<< "$@";
}

case "$1" in
"") # Old-good echo
  echo "$LINE_TEXT"
  ;;
"_") # Typing Effect
  echo -e "$LINE_TEXT" | trim | typing
  ;;
"+") # Eval Script
  eval_script "$LINE_TEXT"
  ;;
"a") # Annotation (the separator is: ✂︎)
  IFS='✂︎' read_array segments <<<"$LINE_TEXT"
  echo -en "${segments[@]:0:1}"
  echo -e "${segments[@]:2:1}" | trim | typing
  ;;
"b") # (b stand for a Bear, the default character in this command)
  echo
  if [ "$2" = "" ]; then
    echo -en "  ʕ•ᴥ•ʔ <( "
    echo -en "$LINE_TEXT" | trim | typing && echo -e " )"
  else
    IFS='✂︎' read_array segments <<<"$LINE_TEXT"
    character=${segments[*]:0:1}
    cue=${segments[*]:2:1}

    echo -en "  $character <( "
    echo -en "${cue}" | trim | typing && echo -e " )"
  fi
  echo
  ;;
"c") # Command (pass any arg to skip execution)
  IFS='✂︎' read_array segments <<<"$LINE_TEXT"
  echo -e "●"
  echo -e "│"
  echo -en "└"

  segment2=${segments[*]:1:1}

  if [ "${segment2}" != "" ]; then
    echo -en "\e[38;5;214m 〉\e[38;5;255m" && echo -n "${segments[@]:1:1}" | trim | typing
  else
    echo -en "\e[38;5;214m 〉\e[38;5;255m" && echo -n "${segments[@]:0:1}" | trim | typing
  fi

  if [ "$2" = "" ]; then
    # shellcheck disable=SC2028
    echo -en " ⚡️\n"
    echo
    sleep 1
    bash -c "$(join_by '&&' "${segments[@]}")"
  fi
  echo
  ;;
"d") # the Dude character
  if [[ -z "$2" ]]; then declare -a eyes=("⊙" "⊙"); else IFS='~' read_array eyes <<<"$2"; fi
  if [[ -z "$3" ]]; then declare -a face=("_" "ʖ"); else IFS='~' read_array face <<<"$3"; fi

  eyel=${eyes[*]:0:1}
  eyer=${eyes[*]:1:1}
  facem=${face[*]:0:1}
  facen=${face[*]:1:1}

  echo -e "    ┌──┐  "
  echo -e "   ─┴──┴─ "
  echo -en "  ʕ|${eyel/␠/ }${facem/␠/ }${facen/␠/ }${eyer/␠/ }|ʔ <( " && echo -en "${LINE_TEXT}" | trim | typing && echo -e " )"
  echo
  ;;
"e") # Expect tcl oneliner
  expect -c "${LINE_TEXT}" && clear
  ;;
"k") # Key
  print_key "$LINE_TEXT"
  ;;
"p") # Pipe the line to the command
  shift
  echo -n "${LINE_TEXT}" | "$@"
  ;;
"t") # Title
  toilet -t -f pagga -S -F border "${LINE_TEXT}" | trim | lolcat
  ;;
"y") # yank the next scenario line
  echo -n "${LINE_TEXT}" | trim | pbcopy
  ;;
"s") # Scene
  export SCENE=$((SCENE + 1))

  # shellcheck source=/dev/null
  source "$SCENE_PREFIX$SCENE"
  ;;
esac
